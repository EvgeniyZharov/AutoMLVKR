import logging
from io import StringIO
from Pipelines.BasePipeline import BasePipeline


class ElectronicPipeline(BasePipeline):
    def __init__(self, st):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ (—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞).

        :param st: –æ–±—ä–µ–∫—Ç Streamlit
        """
        import pandas as pd
        from Pipelines.registry_models import registry_models

        self.title = "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞)"
        super().__init__(st, self.title)

        self.registry_models = registry_models
        self.n_lags = 5

        # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components_data = """
        –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞,–ö–ª–∞—Å—Å –ø—Ä–∏–±–æ—Ä–∞,–¢–∏–ø –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏,"–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Å–µ–π (–¥–æ–ø–∏–Ω–≥), —Å–º‚Åª¬≥","–î–ª–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞, –º–∫–º","–®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞, –º–∫–º","–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è, –í","–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ç–≤–æ—Ä–µ, –í","–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ö",ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        Si,–≥—Ä–∞–∂–¥. –Ω.,n-—Ç–∏–ø–∞,2.50E+17,1,5,0,0,398,1
        Si,–≥—Ä–∞–∂–¥. –Ω.,n-—Ç–∏–ø–∞,2.50E+17,1,10,0,0,398,2
        """
        self.example_components = pd.read_csv(StringIO(components_data))

        # –ü—Ä–∏–º–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        temperature_data = """
        ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞,–í—Ä–µ–º—è,–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        1,0.0,98.81
        1,0.10,99.86
        1,0.21,103.03
        1,0.31,103.78
        """
        self.example_temperature = pd.read_csv(StringIO(temperature_data))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ElectronicPipeline")

    def build_dl_model(self, model_type="LSTM", input_shape=(5, 1), units=64):
        """
        –°—Ç—Ä–æ–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

        :param model_type: —Ç–∏–ø –º–æ–¥–µ–ª–∏ ('LSTM', 'GRU', 'CNN_LSTM' –∏ —Ç.–¥.)
        :param input_shape: —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        :param units: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–π—Ä–æ–Ω–æ–≤ –≤ —Å–∫—Ä—ã—Ç–æ–º —Å–ª–æ–µ
        :return: —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Keras
        """
        from tensorflow.keras.layers import SimpleRNN, LSTM, GRU, Dense, Bidirectional, Conv1D, MaxPooling1D, ConvLSTM2D
        from tensorflow.keras.layers import BatchNormalization, Flatten
        from tensorflow.keras.models import Sequential

        model = Sequential()

        if model_type == "LSTM":
            model.add(LSTM(units, input_shape=input_shape))
        elif model_type == "LSTM_GRU":
            model.add(LSTM(units, input_shape=input_shape))
        elif model_type == "CNN_LSTM":
            model.add(Conv1D(filters=units, kernel_size=3, activation='relu', input_shape=input_shape))
            model.add(MaxPooling1D(pool_size=2))
            model.add(LSTM(50))
        elif model_type == "ConvLSTM":
            model.add(ConvLSTM2D(filters=units, kernel_size=(2, 2), activation='relu',
                                 input_shape=(5, 1), return_sequences=False, padding='same'))
            model.add(BatchNormalization())
            model.add(Flatten())
            model.add(Dense(64, activation='relu'))
        elif model_type == "GRU":
            model.add(GRU(units, input_shape=input_shape))
        elif model_type == "SimpleRNN":
            model.add(SimpleRNN(units, input_shape=input_shape))
        elif model_type == "BidirectionalLSTM":
            model.add(Bidirectional(LSTM(units), input_shape=input_shape))
        elif model_type == "BidirectionalGRU":
            model.add(Bidirectional(GRU(units), input_shape=input_shape))
        else:
            raise ValueError(f"Unsupported model type: {model_type}")

        model.add(Dense(1))
        model.compile(optimizer="adam", loss="mse")

        self.logger.info("–°–æ–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å —Ç–∏–ø–∞ %s", model_type)
        return model

    def get_data(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.

        :return: True –µ—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–Ω–∞—á–µ False
        """
        self.logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ CSV-—Ñ–∞–π–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        text_1 = """–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏..."""
        text_2 = """–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π..."""

        self.components_file = self.st.file_uploader(text_1, type=["csv"])
        self.st.dataframe(self.example_components)
        self.temperature_file = self.st.file_uploader(text_2, type=["csv"])
        self.st.dataframe(self.example_temperature)

        if self.components_file and self.temperature_file:
            self.df = self.merge(self.components_file, self.temperature_file)
            self.all_tables = self.df.columns.tolist()
            self.logger.info("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")
            return True
        else:
            self.logger.warning("–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return False

    def merge(self, file1, file2):
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ CSV-—Ñ–∞–π–ª–∞ –ø–æ ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.

        :param file1: —Ñ–∞–π–ª —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        :param file2: —Ñ–∞–π–ª —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
        :return: –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π DataFrame
        """
        import pandas as pd

        df1 = pd.read_csv(file1)
        df2 = pd.read_csv(file2)
        merged_df = df2.merge(df1, on="ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞", how="left")

        self.st.write("üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
        self.st.dataframe(merged_df.head())
        merged_df.to_csv("test_temp.csv", index=False)

        self.logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_temp.csv")
        return merged_df
